unique template personality/se_dpm/config_dav;

#
# DPM_dav defaults
#
variable DPM_DAV_ENABLED ?= true;
variable HTTPD_CONF_DIR ?= "/etc/httpd";


#
# Consistency check
#
variable check = if ( !DMLITE_ENABLED ) error ("LCGDM HTTP / WebDAV requires DMLite");

# Configure httpd to use the worker MPM
include 'components/metaconfig/config';
'/software/components/metaconfig/services/{/etc/sysconfig/httpd}' = {
  SELF['backup'] = '.quattor-saved';
  SELF['contents'] = nlist('HTTPD', '/usr/sbin/httpd.worker');
  SELF['daemons'] = nlist('httpd', 'restart');
  SELF['module'] = 'tiny';
  SELF;
};


#
# Disable /etc/httpd/conf.d/ssl.conf
#
include 'components/filecopy/config';
'/software/components/filecopy/services' = if (is_boolean(DPM_DAV_ENABLED) && DPM_DAV_ENABLED) {
    SELF[escape(HTTPD_CONF_DIR + '/conf.d/ssl.conf')] = nlist(
        'config', "# Disabled by Quattor\n",
        'owner', 'root',
        'group', 'root',
        'perms', '0644',
        'backup', true,
    );
    SELF;
} else {
    SELF;
};

#
# Disable /etc/httpd/conf.d/zgridsite.conf
#
include 'components/filecopy/config';
'/software/components/filecopy/services' = if (is_boolean(DPM_DAV_ENABLED) && DPM_DAV_ENABLED) {
    SELF[escape(HTTPD_CONF_DIR + '/conf.d/zgridsite.conf')] = nlist(
        'config', "# Disabled by Quattor\n",
        'owner', 'root',
        'group', 'root',
        'perms', '0644',
        'backup', true,
    );
    SELF;
} else {
    SELF;
};

#
# Patch /etc/httpd/conf/httpd.conf
#
variable contents = {
    "#!/bin/bash\n" +
    'sed -i "s/User .*/User ' + DPM_USER + '/g" ' + HTTPD_CONF_DIR + "/conf/httpd.conf\n" +
    'sed -i "s/Group .*/Group ' + DPM_GROUP + '/g" ' + HTTPD_CONF_DIR + "/conf/httpd.conf\n" +
    'sed -i "s/#*ServerName .*/ServerName ' + FULL_HOSTNAME + '/g" ' +  HTTPD_CONF_DIR + "/conf/httpd.conf\n" +
    'sed -i "s/^LoadModule dav_module \(.*\)/#LoadModule dav_module \1/g" ' + HTTPD_CONF_DIR + "/conf/httpd.conf\n" +
    'sed -i "s/^LoadModule dav_fs_module \(.*\)/#LoadModule dav_fs_module \1/g" ' + HTTPD_CONF_DIR + "/conf/httpd.conf\n" +
    'sed -i "s/^[# ]*KeepAlive .*/KeepAlive On/" ' + HTTPD_CONF_DIR + "/conf/httpd.conf\n";
};
include 'components/filecopy/config';
'/software/components/filecopy/services' = if (is_boolean(DPM_DAV_ENABLED) && DPM_DAV_ENABLED) {
    SELF[escape('/usr/local/quattor/sbin/dpm-dav_httpd.conf_patch.sh')] = nlist(
        'config', contents,
        'owner', 'root',
        'group', 'root',
        'perms', '0755',
        'backup', false,
        'restart', '/usr/local/quattor/sbin/dpm-dav_httpd.conf_patch.sh',
    );
    SELF;
} else {
    SELF;
};

#
# Hack to modify fetch-crl cron to reload Apache
# FIXME: replace by a cleaner mechanism when https://bugzilla.nikhef.nl/show_bug.cgi?id=27 has 
#        been addressed.
#
variable contents = <<EOF;
#!/bin/bash
# Modify fetch-crl to reload Apache
if [ -f "/etc/cron.d/fetch-crl" ]; then
    grep -q "service httpd reload" "/etc/cron.d/fetch-crl"
    if [ $? -ne 0 ]; then
        if [ ! -f "/etc/fetch-crl.cron.backup" ]; then
            cp "/etc/cron.d/fetch-crl" "/etc/fetch-crl.cron.backup"
        fi
        # Parse old cronjob
        FETCH_CRL_CRONJOB=$(grep -x -P '^[^#\n].*' "/etc/cron.d/fetch-crl")
        FETCH_CRL_CMD=$(echo "${FETCH_CRL_CRONJOB}" | awk '{for (i = 7; i <= NF; i++) printf("%s ", $i);}')
        FETCH_CRL_TIME=$(echo "${FETCH_CRL_CRONJOB}" | awk '{printf("%s %s %s %s %s", $1, $2, $3, $4, $5);}')
        FETCH_CRL_USER=$(echo "${FETCH_CRL_CRONJOB}" | awk '{print $6;}')
        # Append to the command the reload of lcgdm-dav
        FETCH_CRL_CMD="{ ${FETCH_CRL_CMD}; } && /sbin/service httpd reload &> /dev/null"
        # Overwrite
        echo    "# fetch-crl cronjob regenerated by Quattor" > "/etc/cron.d/fetch-crl"
        echo    "# The old cronjob was copied as /etc/fetch-crl.cron.backup" >> "/etc/cron.d/fetch-crl"
        echo -e "${FETCH_CRL_TIME}\t${FETCH_CRL_USER}\t${FETCH_CRL_CMD}" >> "/etc/cron.d/fetch-crl"
    fi
fi
EOF
include 'components/filecopy/config';
'/software/components/filecopy/services' = if (is_boolean(DPM_DAV_ENABLED) && DPM_DAV_ENABLED) {
    SELF[escape('/usr/local/quattor/sbin/fetch-crl-cron_patch.sh')] = nlist(
        'config', contents,
        'owner', 'root',
        'group', 'root',
        'perms', '0755',
        'backup', false,
        'restart', '/usr/local/quattor/sbin/fetch-crl-cron_patch.sh',
    );
    SELF;
} else {
    SELF;
};
