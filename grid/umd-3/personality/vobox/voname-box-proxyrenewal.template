#!/bin/sh
# voname-box-proxyrenewal
# versions <= 1.0.1 by Simone Campana
# versions -> 1.0.4 by Elisa Lanciotti
# versions -> 1.0.5 by Andrew Elwell
# versions >= 2.0.0 by Maarten Litmaath
#
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# chkconfig: 2345 99 00
# description: Regularly renews registered user proxies \
#              and starts or stops registered VO agents.

. /etc/rc.d/init.d/functions

do_failure()
{
    echo -n " $*"
    failure ""
    echo ""

    exit 1
}

do_success()
{
    echo -n " $*"
    success ""
    echo ""

    exit 0
}

vo=THEVO
voadmin=THEADMIN

case $vo in
*[!-_.A-Za-z0-9]*)
    do_failure "$0: illegal character in VO name '$vo'"
    exit 1
esac

case $voadmin in
-*)
    do_failure "$0: illegal character in VO admin name '$voadmin'"
    exit 1
esac

vogroup=`id -gn "$voadmin"`

if [ "X$vogroup" = X ]
then
    do_failure "$0: cannot get group of user '$voadmin'"
    exit 1
fi

f=/etc/profile.d/grid-env.sh
[ -r $f ] && . $f

conf=/etc/"$voadmin"-box-proxyrenewal

if [ -r "$conf" ]
then
    . "$conf" || {
	do_failure "$0: cannot configure VOBOX for user '$voadmin'"
	exit 1
    }
fi

vobox_renewd=${VOBOX_LOCATION:-/usr}/sbin/vobox-renewd
pid_file=/var/run/vobox_${vo}_renewd.pid
lock_file=/var/lock/subsys/$vo-box-proxyrenewal
rootdir=${VOBOX_PROXY_ROOT:-/var/lib/vobox}
vodir=$rootdir/$vo
logdir=$vodir/log
agents_log=$logdir/agents.log
uid=`id -u`

for d in $vodir $logdir
do
    mkdir  -p $d || do_failure "$0: cannot mkdir '$d'"
    chmod 750 $d || do_failure "$0: cannot chmod '$d'"

    if [ $uid = 0 ]
    then
	chown $voadmin:$vogroup $d || do_failure "$0: cannot chown '$d'"
    fi
done

X509_USER_PROXY=$vodir/renewal-proxy.pem
export X509_USER_PROXY

proxy()
{
    d=/etc/grid-security
    tmp=$X509_USER_PROXY.$$

    grid-proxy-init -q -cert $d/hostcert.pem -key $d/hostkey.pem \
	-hours 24 -out $tmp ||
	do_failure "$0: cannot obtain host proxy"

    chmod 400 $tmp && chown $voadmin:$vogroup $tmp &&
	mv $tmp $X509_USER_PROXY ||
	do_failure "$0: cannot refresh host proxy"
}

lock()
{
    [ -f $lock_file ] && return 0
    [ $uid = 0 ]      || return 0
    touch $lock_file
}

unlock()
{
    [ -f $lock_file ] || return 0
    [ $uid = 0 ]      || return 0
    rm $lock_file
}

status()
{
    if [ $uid = 0 ]
    then
	cmd="su - $voadmin"
    else
	cmd=sh
    fi

    $cmd -c "$vobox_renewd $vo $voadmin $rootdir status"

    if [ $? = 0 ]
    then
	lock
	return 0
    else
	unlock
	return 1
    fi
}

start()
{
    status && do_success "$0: already running"

    if [ $uid = 0 ]
    then
	proxy
	cmd="su - $voadmin"
    else
	cmd=sh
    fi

    msg="Starting $vobox_renewd"

    $cmd -c "$vobox_renewd $vo $voadmin $rootdir" ||
	do_failure "$msg"

    #
    # do not let the agents slow down the boot procedure
    #

    startdir=$vodir/start
    agents=`ls $startdir 2> /dev/null`

    if [ "X$agents" != X ]
    then
	echo "$0: starting VO agents in the background..."

	for agent in $agents
	do
	    echo "`date +'%Y/%m/%d %H:%M:%S'` Starting $agent"
	    $cmd -c "$startdir/$agent start"
	done >> $agents_log 2>&1 < /dev/null &
    fi

    status && do_success "$msg"

    do_failure "$msg"
}

stop()
{
    if [ $uid = 0 ]
    then
	cmd="su - $voadmin"
    else
	cmd=sh
    fi

    #
    # do not let the agents slow down the shutdown procedure
    #

    stopdir=$vodir/stop
    agents=`ls $stopdir 2> /dev/null`

    if [ "X$agents" != X ]
    then
	n=30

	echo "$0: stopping VO agents in the background..."
	echo "$0: `date` - waiting at most $n seconds..."

	(
	    sleep $n &
	    sleep=$!

	    (
		(
		    for agent in $agents
		    do
			echo "`date +'%Y/%m/%d %H:%M:%S'` Stopping $agent"
			$cmd -c "$stopdir/$agent stop"
		    done

		    kill $sleep 2> /dev/null

		) >> $agents_log 2>&1 &
	    )

	    wait

	) > /dev/null 2>&1 < /dev/null

	echo "$0: `date` - continuing..."
    fi

    $cmd -c "$vobox_renewd $vo $voadmin $rootdir stop"

    msg="Stopping $vobox_renewd"

    status && do_failure "$msg"

    do_success "$msg"
}


case $1 in
start)
    start
    ;;
stop)
    stop
    ;;
proxy)
    proxy
    ;;
status)
    status
    ;;
restart)
    (stop)   # let a subshell do the stop and exit...
    start
    ;;
*)
    echo "Usage: $0 {start|stop|restart|status|proxy}" >&2
    exit 2
esac

